// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	goly "shortlink/features/goly"
	dtos "shortlink/features/goly/dtos"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: newGoly
func (_m *UseCase) Create(newGoly dtos.CreateGolyInput) *dtos.GolyResponse {
	ret := _m.Called(newGoly)

	var r0 *dtos.GolyResponse
	if rf, ok := ret.Get(0).(func(dtos.CreateGolyInput) *dtos.GolyResponse); ok {
		r0 = rf(newGoly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GolyResponse)
		}
	}

	return r0
}

// FindAllGoly provides a mock function with given fields: page, size
func (_m *UseCase) FindAllGoly(page int, size int) []dtos.GolyResponse {
	ret := _m.Called(page, size)

	var r0 []dtos.GolyResponse
	if rf, ok := ret.Get(0).(func(int, int) []dtos.GolyResponse); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.GolyResponse)
		}
	}

	return r0
}

// FindGolyByID provides a mock function with given fields: golyID
func (_m *UseCase) FindGolyByID(golyID int) *dtos.GolyResponse {
	ret := _m.Called(golyID)

	var r0 *dtos.GolyResponse
	if rf, ok := ret.Get(0).(func(int) *dtos.GolyResponse); ok {
		r0 = rf(golyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GolyResponse)
		}
	}

	return r0
}

// GetGolyByUrl provides a mock function with given fields: url
func (_m *UseCase) GetGolyByUrl(url string) (goly.Goly, error) {
	ret := _m.Called(url)

	var r0 goly.Goly
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (goly.Goly, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) goly.Goly); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(goly.Goly)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseClickAndRedirect provides a mock function with given fields: _a0
func (_m *UseCase) IncreaseClickAndRedirect(_a0 goly.Goly) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(goly.Goly) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Modify provides a mock function with given fields: golyData, golyID
func (_m *UseCase) Modify(golyData dtos.CreateGolyInput, golyID int) bool {
	ret := _m.Called(golyData, golyID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(dtos.CreateGolyInput, int) bool); ok {
		r0 = rf(golyData, golyID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: golyID
func (_m *UseCase) Remove(golyID int) bool {
	ret := _m.Called(golyID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(golyID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SearchGoly provides a mock function with given fields: short
func (_m *UseCase) SearchGoly(short string) ([]goly.Goly, error) {
	ret := _m.Called(short)

	var r0 []goly.Goly
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]goly.Goly, error)); ok {
		return rf(short)
	}
	if rf, ok := ret.Get(0).(func(string) []goly.Goly); ok {
		r0 = rf(short)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]goly.Goly)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(short)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreIPAddress provides a mock function with given fields: _a0, ip
func (_m *UseCase) StoreIPAddress(_a0 goly.Goly, ip string) error {
	ret := _m.Called(_a0, ip)

	var r0 error
	if rf, ok := ret.Get(0).(func(goly.Goly, string) error); ok {
		r0 = rf(_a0, ip)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
