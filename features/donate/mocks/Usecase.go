// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	dtos "shortlink/features/donate/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: newData
func (_m *Usecase) Create(newData dtos.TransactionInput) (*dtos.TransactionInputResponse, error) {
	ret := _m.Called(newData)

	var r0 *dtos.TransactionInputResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.TransactionInput) (*dtos.TransactionInputResponse, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(dtos.TransactionInput) *dtos.TransactionInputResponse); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.TransactionInputResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.TransactionInput) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: page, size
func (_m *Usecase) FindAll(page int, size int) []dtos.TransactionInputResponse {
	ret := _m.Called(page, size)

	var r0 []dtos.TransactionInputResponse
	if rf, ok := ret.Get(0).(func(int, int) []dtos.TransactionInputResponse); ok {
		r0 = rf(page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.TransactionInputResponse)
		}
	}

	return r0
}

// Notifications provides a mock function with given fields: notificationPayload
func (_m *Usecase) Notifications(notificationPayload map[string]interface{}) error {
	ret := _m.Called(notificationPayload)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(notificationPayload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
